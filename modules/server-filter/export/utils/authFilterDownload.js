/**
 * Function will return custom SQON generated (with identifier filtering) to be passed to download stream
 * @param req request that contains sqon generated by auth filter.
 * @param params params passed by front-end request.
 * @param sqon SQON provided by faceted search filtering.
 */
export function arrangerAuthFilterDownload(req, params, sqon) {
    try {
        // add user-selected identifiers
        if (params['identifiers'] && params['identifiers'].length > 0) {
            const sqon_id = {
                "op": "in",
                "content": {
                    "field": "identifier",
                    "value": []
                }
            }
            for (const id of params['identifiers']) {
                sqon_id.content.value.push(id)
            }
            req.sqon.content.push(sqon_id)
        }
        // return custom sqon
        return req.sqon




    } catch (error) {
        console.log(`Error returning download SQON: ${error}`)
    }

}
